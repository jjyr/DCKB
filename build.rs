use blake2b_rs::{Blake2b, Blake2bBuilder};

use std::{
    fs::{self, File},
    io::{Read, Result, Write},
};

const PATH_PREFIX: &str = "specs/cells/";
const BUF_SIZE: usize = 8 * 1024;
const CKB_HASH_PERSONALIZATION: &[u8] = b"ckb-default-hash";

const BINARIES: &[&str] = &["dckb", "dao_lock", "custodian_lock"];

fn gen_const_file(file_name: &str, const_name: &str, code_hash: &[u8; 32]) -> Result<()> {
    let mut f = fs::OpenOptions::new()
        .write(true)
        .truncate(true)
        .create(true)
        .open(format!("c/{}.h", file_name))?;
    f.write_all(
        &format!(
            "/* Do not touch! This file is generated by build.rs */\n\
                #ifndef DCKB_{const_name}_H\n\
                #define DCKB_{const_name}_H\n",
            const_name = const_name
        )
        .into_bytes(),
    )?;
    // write code hashes
    let const_val = format!(
        "{{{}}}",
        code_hash
            .iter()
            .map(|i| format!("{}", i))
            .collect::<Vec<_>>()
            .join(" ,")
    );
    f.write_all(
        &format!(
            "const uint8_t {const_name}[] = {const_val};\n",
            const_name = const_name,
            const_val = const_val,
        )
        .into_bytes(),
    )?;
    f.write_all("#endif".as_bytes())?;
    Ok(())
}

fn read_hash(name: &str) -> [u8; 32] {
    let mut buf = [0u8; BUF_SIZE];
    let path = format!("{}{}", PATH_PREFIX, name);
    let mut fd = File::open(&path).expect("open file");
    let mut blake2b = new_blake2b();
    loop {
        let read_bytes = fd.read(&mut buf).expect("read file");
        if read_bytes > 0 {
            blake2b.update(&buf[..read_bytes]);
        } else {
            break;
        }
    }
    let mut hash = [0u8; 32];
    blake2b.finalize(&mut hash);
    hash
}

fn main() {
    let dao_lock_code_hash = read_hash("dao_lock");
    let custodian_lock_code_hash = read_hash("custodian_lock");
    for (name, const_name, code_hash) in &[
        ("dao_lock", "DAO_LOCK_CODE_HASH", dao_lock_code_hash),
        (
            "custodian_lock",
            "CUSTODIAN_LOCK_CODE_HASH",
            custodian_lock_code_hash,
        ),
    ] {
        gen_const_file(name, const_name, code_hash).expect("gen const file");
    }
    let mut f = fs::OpenOptions::new()
        .write(true)
        .truncate(true)
        .create(true)
        .open("code_hashes.txt")
        .expect("open");
    for name in BINARIES {
        let hash = read_hash(name);
        let actual_hash = faster_hex::hex_string(&hash).expect("hex");
        f.write_all(&format!("{} -> {}\n", name, actual_hash).into_bytes())
            .expect("write hash");
    }
}

pub fn new_blake2b() -> Blake2b {
    Blake2bBuilder::new(32)
        .personal(CKB_HASH_PERSONALIZATION)
        .build()
}
