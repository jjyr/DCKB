pub use blake2b_rs::{Blake2b, Blake2bBuilder};

use std::{
    fs::{self, File},
    io::{Read, Write},
};

const PATH_PREFIX: &str = "specs/cells/";
const BUF_SIZE: usize = 8 * 1024;
const CKB_HASH_PERSONALIZATION: &[u8] = b"ckb-default-hash";

const BINARIES: &[&str] = &["dckb", "deposit_lock"];

fn gen_const(deposit_lock_code_hash: [u8; 32]) {
    let s = format!(
        "{{{}}}",
        deposit_lock_code_hash
            .iter()
            .map(|i| format!("{}", i))
            .collect::<Vec<_>>()
            .join(" ,")
    );
    let mut f = fs::OpenOptions::new()
        .write(true)
        .truncate(true)
        .create(true)
        .open("c/const.h")
        .expect("open");
    f.write_all(
        &format!(
            r#"/* Do not touch this file! This file is auto generated by build.rs */
#ifndef DCKB_CONST_H
#define DCKB_CONST_H

/* Code hash of DepositLock */
const uint8_t DEPOSIT_LOCK_CODE_HASH[] = {deposit_lock_code_hash};
#endif
"#,
            deposit_lock_code_hash = s
        )
        .into_bytes(),
    )
    .expect("generate c/const.h");
}

fn read_hash(name: &str) -> [u8; 32] {
    let mut buf = [0u8; BUF_SIZE];
    let path = format!("{}{}", PATH_PREFIX, name);
    let mut fd = File::open(&path).expect("open file");
    let mut blake2b = new_blake2b();
    loop {
        let read_bytes = fd.read(&mut buf).expect("read file");
        if read_bytes > 0 {
            blake2b.update(&buf[..read_bytes]);
        } else {
            break;
        }
    }
    let mut hash = [0u8; 32];
    blake2b.finalize(&mut hash);
    hash
}

fn main() {
    let deposit_lock_code_hash = read_hash("deposit_lock");
    gen_const(deposit_lock_code_hash);
    let mut f = fs::OpenOptions::new()
        .write(true)
        .truncate(true)
        .create(true)
        .open("code_hashes.txt")
        .expect("open");
    for name in BINARIES {
        let hash = read_hash(name);
        let actual_hash = faster_hex::hex_string(&hash).unwrap();
        f.write_all(&format!("{} -> {}\n", name, actual_hash).into_bytes())
            .expect("write hash");
    }
}

pub fn new_blake2b() -> Blake2b {
    Blake2bBuilder::new(32)
        .personal(CKB_HASH_PERSONALIZATION)
        .build()
}
